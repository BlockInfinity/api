try {
    var web3 = require("web3");
    web3 = new web3();

    web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));

    web3.eth.defaulAccount = web3.eth.accounts[0];

    web3.exchangeContract = getExchangeContract("0xea295bdb835dcb6f415b443ef1d0cf58ec99025b");

    // Currently the ABI from contracts/Etherex_raw.sol
    function getExchangeContract(_address) {
        var etherex_rawContract = web3.eth.contract([{ "constant": true, "inputs": [{ "name": "_period", "type": "uint256" }], "name": "getMatchingPrice", "outputs": [{ "name": "", "type": "int256" }], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "getCurrState", "outputs": [{ "name": "", "type": "uint8" }], "payable": false, "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "askReservePrices", "outputs": [{ "name": "", "type": "int256" }], "payable": false, "type": "function" }, { "constant": false, "inputs": [{ "name": "_user", "type": "address" }], "name": "registerProducer", "outputs": [], "payable": false, "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }, { "name": "", "type": "address" }], "name": "matchedBidReserveOrders", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "type": "function" }, { "constant": false, "inputs": [{ "name": "_user", "type": "address" }], "name": "registerConsumer", "outputs": [], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "getCurrPeriod", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }, { "name": "", "type": "address" }], "name": "matchedAskReserveOrders", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "type": "function" }, { "constant": false, "inputs": [{ "name": "_type", "type": "int8" }, { "name": "_volume", "type": "uint256" }, { "name": "_period", "type": "uint256" }], "name": "settle", "outputs": [], "payable": false, "type": "function" }, { "constant": false, "inputs": [{ "name": "_price", "type": "int256" }, { "name": "_volume", "type": "uint256" }], "name": "submitBid", "outputs": [], "payable": false, "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "settleMapping", "outputs": [{ "name": "settleCounter", "type": "uint256" }, { "name": "sumProduced", "type": "uint256" }, { "name": "sumConsumed", "type": "uint256" }, { "name": "excess", "type": "uint256" }, { "name": "lack", "type": "uint256" }], "payable": false, "type": "function" }, { "constant": true, "inputs": [{ "name": "_owner", "type": "address" }], "name": "getCollateral", "outputs": [{ "name": "", "type": "int256" }], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "getAskOrders", "outputs": [{ "name": "rv1", "type": "int256[]" }, { "name": "rv2", "type": "uint256[]" }], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "getStartBlock", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "getBidOrders", "outputs": [{ "name": "rv1", "type": "int256[]" }, { "name": "rv2", "type": "uint256[]" }], "payable": false, "type": "function" }, { "constant": false, "inputs": [], "name": "Etherex", "outputs": [], "payable": false, "type": "function" }, { "constant": false, "inputs": [], "name": "testUpdateState", "outputs": [], "payable": false, "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "bidReservePrices", "outputs": [{ "name": "", "type": "int256" }], "payable": false, "type": "function" }, { "constant": false, "inputs": [], "name": "init", "outputs": [], "payable": false, "type": "function" }, { "constant": false, "inputs": [{ "name": "_price", "type": "int256" }, { "name": "_volume", "type": "uint256" }], "name": "submitAsk", "outputs": [], "payable": false, "type": "function" }, { "constant": false, "inputs": [{ "name": "_user", "type": "address" }], "name": "registerCertificateAuthority", "outputs": [], "payable": false, "type": "function" }]);
        return (etherex_rawContract.at(_address));
    }
} catch (err) {
    throw new Error("Geth command line not running. Not able to connect to http://localhost:8545")
}

module.exports = web3;
