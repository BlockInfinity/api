---
swagger: "2.0"
info:
  version: "0.1.0"
  title: "BlockEnergy API"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /smartMeter/settle:
    post:
      tags: 
        - smartMeter    
      description: "The endpoint which is to be accessed by the smartmeter. It is supposed to be called regularly periodically.
                    For produced energy use positive energy volume, for consumed use negative energy volume. Alongside the
                    energy a period must be specified of the smartcontract for which the smartmeter is providing information."
      operationId: "smartMeterSettle"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "settleRequest"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/settleRequest"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Default"
  /trade/buy:
    post:
      tags: 
        - trade      
      description: "Endpoint for placing bid for certain amount of electricity for a certain price. Requires an account's address and password alongside a volume estimate. Price could be optionally provided.
                    If the price argument is omited, the order will get matched at the lowest price after all the priced bids. Otherwise, if a price is given, the order will get matched only if an appropriate
                    match is found."
      operationId: "submitBuyRequest"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "buyRequest"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/buyRequest"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"          
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

      x-swagger-router-controller: "trade_controller"
  /trade/sell:
    post:
      tags: 
        - trade  
      description: "Endpoint for placing ask orders for certain amount of electricity at a certain price. Account adress and password are required."
      operationId: "submitSellRequest"
      parameters:
        - name: "sellRequest"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/sellRequest"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"          
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "trade_controller"
  /authority/register:
    post:
      tags: 
        - authority    
      description: "Registers a new user account, given a password and an user type. Returns the address of the newly created account. May only be invoked by users of 'Authority' status. "
      operationId: "register"
      parameters:
        - name: "registerRequest"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/registerRequest"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/registerResponse"          
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "authority_controller"
  /info/askOrders:
    get:
      tags: 
        - info 
      description: "Get all ask orders for specific period. If no period is specified the call will return results for the last period."
      operationId: "getAskOrders"
      responses:
        200:
          description: "Returns orders as JSON object wrapped in JSON array. Also provides period."
          schema:
            $ref: "#/definitions/askQuotes"
        404:
          description: "Operation not found"
        500:
          description: "Server error"
      x-swagger-router-controller: "info_controller"
  /info/bidOrders:
    get:
      tags: 
        - info     
      description: "Get all bid orders for specific period. If no period is specified will return for the last period."
      operationId: "getBidOrders"
      responses:
        200:
          description: "Returns orders as JSON object wrapped in JSON array. Also provides period."
          schema:
            $ref: "#/definitions/bidQuotes"          
        404:
          description: "Operation not found"
        500:
          description: "Server error"
      x-swagger-router-controller: "info_controller"
  /info/askReserveOrders:
    get:
      tags: 
        - info     
      description: "Get all reserve ask orders for specific period. If no period is specified will return for the last period."
      operationId: "getAskReserveOrders"
      responses:
        200:
          description: "Returns orders as JSON object wrapped in JSON array. Also provides period."
          schema:
            $ref: "#/definitions/askQuotes"              
        404:
          description: "Operation not found"
        500:
          description: "Server error"
      x-swagger-router-controller: "info_controller"
  /info/bidReserveOrders:
    get:
      tags: 
        - info
      description: "Get all reserve bid orders for specific period. If no period is specified will return for the last period."
      operationId: "getBidReserveOrders"
      responses:
        200:
          description: "Returns orders as JSON object wrapped in JSON array. Also provides period."
          schema:
            $ref: "#/definitions/bidQuotes"            
        404:
          description: "Operation not found"
        500:
          description: "Server error"
      x-swagger-router-controller: "info_controller"
  /info/matchingPrice:
    get:
      tags: 
        - info
      description: "Get matching price for specific period. If no period is specified will return for the last period."
      operationId: "getMatchingPrice"
      parameters:
      - name: "period"
        in: "query"
        description: "Period"
        required: false
        type: "number"
      responses:
        200:
          description: "Returns matching price."
          schema:
            type: number
        404:
          description: "Operation not found"
        500:
          description: "Server error"
      x-swagger-router-controller: "info_controller"
  /info/state:
    get:
      tags: 
        - info
      description: "Get the current state"
      operationId: "getState"
      responses:
        200:
          description: "Returns the current state and period."
          schema:
            $ref: "#/definitions/stateReponse"
        404:
          description: "Operation not found"
        500:
          description: "Server error"
      x-swagger-router-controller: "info_controller"
  /info/balance:
    get:
      tags: 
        - info
      description: "Get the current balance for specific account"
      operationId: "getBalance"
      parameters:
      - name: "address"
        in: "query"
        description: "address"
        required: true
        type: "string"
      responses:
        200:
          description: "Returns the current balance from specific account."
          schema:
            $ref: "#/definitions/balanceResponse"
        404:
          description: "Operation not found"
        500:
          description: "Server error"
      x-swagger-router-controller: "Default"

definitions:
  buyRequest:
    required:
      - accountAddress
      - password
      - volume
    properties:
      accountAddress:
        type: number
      password:
        type: string
      volume:
        type: number
      price:
        type: number
  sellRequest:
    required:
      - accountAddress
      - password
      - volume
      - price
    properties:
      accountAddress:
        type: number
      password:
        type: string
      volume:
        type: number
      price:
        type: number
  registerRequest:
    required:
      - password
      - type
    properties:
      password:
        type: string
      type:
        type: string
  settleRequest:
    required:
      - datetime
      - volume
      - type
      - smartMeterAddress
    properties:
      volume:
        type: number
      datetime:
        type: number
      type:
        type: string
      smartMeterAddress:
        type: number
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  SuccessResponse:
    properties:
      succeded:
        type: boolean
  registerResponse:
    properties:
      userAddress:
        type: string
  bidQuotes:
    properties:
      period:
        type: number
      bidOrders:
        type: array
	  items:
	    $ref: "#/definitions/quote"
  askQuotes:
    properties:
      period:
        type: number
      askOrders:
        type: array
          items:
            $ref: "#/definitions/quote"
  quote:
    properties:
      price:
        type: number
      volume:
        type: number
  stateReponse:
    properties:
      state:
        type: string
      period:
        type: number
  balanceResponse:
    properties:
      balance:
        type: number
    
  
        
        
   

